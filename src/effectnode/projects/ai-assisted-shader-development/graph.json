{
  "settings": [
    {
      "codeID": "_kit5h2c_xgm7ojm",
      "nodeID": "_ne7rk2f_qwuxwti",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_hc1bmqv_gfx2nsl",
          "label": "name",
          "type": "text",
          "value": "my webgl canvas"
        }
      ],
      "title": "main"
    },
    {
      "codeID": "_6wwhxoe_fp2fg97",
      "nodeID": "_quzfyzi_iybz833",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_340ozy1_bvl61x2",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0.48000000000000004
        },
        {
          "_id": "_wqx0zng_5cvbuet",
          "label": "baseColor",
          "type": "color",
          "value": "#003eff"
        },
        {
          "_id": "_v22exa7_h0arilg",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        },
        {
          "_id": "_uxvekoz_vlcqhii",
          "label": "happyColor",
          "type": "color",
          "value": "#c10e0e"
        }
      ],
      "title": "happy"
    },
    {
      "codeID": "_x027a1w_24c0grb",
      "nodeID": "_ck2nyne_fksh47i",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_qyubhzw_05aof46",
          "label": "pointLightColor",
          "type": "color",
          "value": "#ffffff"
        },
        {
          "_id": "_3cr50ux_ktd5kuq",
          "label": "intensity",
          "type": "range",
          "min": 0,
          "max": 100.00000000000001,
          "step": 0.09999999999999998,
          "value": 2.999999999999999
        }
      ],
      "title": "light"
    },
    {
      "codeID": "_hbuh2ad_05kot3i",
      "nodeID": "_5zdzfzx_t2sevtt",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_swgs8mf_xsr52yi",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_ak23u2c_yrx8fim",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        },
        {
          "_id": "_1e6obts_a5r83xl",
          "label": "positionZ",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 5
        },
        {
          "_id": "_e1h29nd_2x7vny0",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        }
      ],
      "title": "camera"
    },
    {
      "codeID": "_e7jaen2_0bdd9xz",
      "nodeID": "_x801t0d_2qm4x7k",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_trk3v9r_x6fakj6",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        },
        {
          "_id": "_1ko0o77_i9qjb4e",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_yykfz1w_owrte7e",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        }
      ],
      "title": "color",
      "metaData": {}
    },
    {
      "codeID": "_ygjgayq_",
      "nodeID": "_napk8j9_",
      "nodeTitle": "node",
      "spaceID": "shader-ai-flow",
      "code": "",
      "data": [
        {
          "_id": "_z63kv6p_",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        },
        {
          "_id": "_1q9kf20_",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_2pga102_",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        }
      ],
      "title": "ai",
      "metaData": {
        "aiOutput": "It appears to be a Shadertoy shader written in GLSL. This is a generative art platform where artists create interactive animations and visuals using shaders.\n\nThe provided code consists of two main parts:\n\n1. `waterwaves` function: This is the main procedural noise function, responsible for generating an animation of waves.\nIt takes UV coordinates as input and produces an RGBA output.\nThe function simulates wave movement by iterating a specified number of times (`MAX_ITER`) using the following formula to calculate each step:\n   ```\n    i = p + vec2(cos(time - i.x) + sin(time + i.y), sin(time - i.y) + cos(time + i.x));\n    time -= float(n) * 0.5;\n   ```\nIt then calculates the cumulative length `c` of the waves and maps it to a color using `sin()`, `cos()` functions.\n\n2. The `getHex` function: This function takes UV coordinates as input and returns a hexagonal grid coordinate for each cell in the form of the central hexagonal point.\n\nIn the `mainImage` function, which is the entry point of the shader program:\n*   The `getHex` function generates the hexagonal grid coordinate and central hexagonal point based on the given UV coordinates.\nThe result from the `waterwaves` function, which generates an animated wave effect with random perturbations.\n\nTo further optimize or adjust the output, one can play with the constant values in the `TAU`, `MAX_ITER`, and `FLUCTUATION` defines.",
        "instructionText": "keep same function input and keep same function output. ",
        "codeText": "#define TAU 6.28318530718\n#define MAX_ITER 15\n#define FLUCTUATION 0.1\n\n\nvec4 waterwaves(in vec2 uv) {\n    float time = sin(iTime * 0.05) * 2.5;\n    vec2 p = mod(uv * TAU * 2.0, TAU) - 250.0;\n\n    // Introduce a fluctuation factor for more realistic wave patterns\n    float fluc = sin(time / FLUCTUATION);\n    time *= 1.0 + sin(time / FLUCTUATION);\n\n    vec2 i = vec2(p), o;\n    float c = 0.1, inten = 0.0035; // Wave intensity factor\n\n    for (int n = 0; n < MAX_ITER; n++) {\n        time -= float(n) * 0.5;\n        i = p + vec2(cos(time - i.x) + sin(time + i.y), sin(time - i.y) + cos(time + i.x));\n        c += 1.0 / length(vec2(p.x / (sin(i.x + time) / inten), p.y / (cos(i.y + time) / inten)));\n    }\n    // Average cumulative length over all iterations\n    c /= float(MAX_ITER);\n    c = 1.17 - pow(c, 2.0);\n\n    float colour = sin(pow(abs(c), 8.0));\n    colour = clamp(colour, 0.0, 1.0);\n\n    return vec4(clamp(vec3(colour), 0.0, 1.0), 1.0);\n}\n#define FLAT_TOP_HEXAGON\n\n// Helper vector. If you're doing anything that involves regular triangles or hexagons, the\n// 30-60-90 triangle will be involved in some way, which has sides of 1, sqrt(3) and 2.\n#ifdef FLAT_TOP_HEXAGON\nconst vec2 s = vec2(1.7320508, 1);\n#else\nconst vec2 s = vec2(1, 1.7320508);\n#endif\n\nfloat hash21(vec2 p)\n{\n    return fract(sin(dot(p, vec2(141.13, 289.97)))*43758.5453);\n}\n\n// The 2D hexagonal isosuface function: If you were to render a horizontal line and one that\n// slopes at 60 degrees, mirror, then combine them, you'd arrive at the following. As an aside,\n// the function is a bound -- as opposed to a Euclidean distance representation, but either\n// way, the result is hexagonal boundary lines.\nfloat hex(in vec2 p)\n{    \n    p = abs(p);\n    \n    #ifdef FLAT_TOP_HEXAGON\n    return max(dot(p, s*.5), p.y); // Hexagon.\n    #else\n    return max(dot(p, s*.5), p.x); // Hexagon.\n    #endif    \n}\n\n// This function returns the hexagonal grid coordinate for the grid cell, and the corresponding \n// hexagon cell ID -- in the form of the central hexagonal point. That's basically all you need to \n// produce a hexagonal grid.\n//\n// When working with 2D, I guess it's not that important to streamline this particular function.\n// However, if you need to raymarch a hexagonal grid, the number of operations tend to matter.\n// This one has minimal setup, one \"floor\" call, a couple of \"dot\" calls, a ternary operator, etc.\n// To use it to raymarch, you'd have to double up on everything -- in order to deal with \n// overlapping fields from neighboring cells, so the fewer operations the better.\nvec4 getHex(vec2 p)\n{    \n    // The hexagon centers: Two sets of repeat hexagons are required to fill in the space, and\n    // the two sets are stored in a \"vec4\" in order to group some calculations together. The hexagon\n    // center we'll eventually use will depend upon which is closest to the current point. Since \n    // the central hexagon point is unique, it doubles as the unique hexagon ID.\n    \n    #ifdef FLAT_TOP_HEXAGON\n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n    #else\n    vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n    #endif\n    \n    // Centering the coordinates with the hexagon centers above.\n    vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    \n    \n    // Nearest hexagon center (with respect to p) to the current point. In other words, when\n    // \"h.xy\" is zero, we're at the center. We're also returning the corresponding hexagon ID -\n    // in the form of the hexagonal central point.\n    //\n    // On a side note, I sometimes compare hex distances, but I noticed that Iomateron compared\n    // the squared Euclidian version, which seems neater, so I've adopted that.\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n        ? vec4(h.xy, hC.xy) \n        : vec4(h.zw, hC.zw + .5);\n}\n\n\nvoid mainImage(out vec4 mainColor, in vec2 uv) {\n    vec4 water = getHex(vec2(5.0 * uv.y, 10.0 * uv.x));\n\n    vec4 eDist = waterwaves(vec2(hex(water.xy)));\n\n    vec3 color = vec3(0.0, 1.0, 1.0);\n    mainColor = vec4(\n        pow(eDist.x, 1.0),\n        pow(eDist.y, 1.0),\n        pow(eDist.z, 1.0), \n        water.a\n    ) * vec4(color, 1.0);\n}"
      },
      "enableFullScreen": true
    },
    {
      "codeID": "_o1atqxp_",
      "nodeID": "_bzyp0zk_",
      "nodeTitle": "node",
      "spaceID": "shader-ai-flow",
      "code": "",
      "data": [
        {
          "_id": "_tmdurqv_",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        },
        {
          "_id": "_oolzvk0_",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_rkvk26k_",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        }
      ],
      "title": "mesh",
      "metaData": {
        "shaderBox": "#define TAU 6.28318530718\n#define MAX_ITER 15\n#define FLUCTUATION 0.1\n\n\nvec4 waterwaves(in vec2 uv) {\n    float time = sin(iTime * 0.05) * 2.5;\n    vec2 p = mod(uv * TAU * 2.0, TAU) - 250.0;\n\n    // Introduce a fluctuation factor for more realistic wave patterns\n    float fluc = sin(time / FLUCTUATION);\n    time *= 1.0 + sin(time / FLUCTUATION);\n\n    vec2 i = vec2(p), o;\n    float c = 0.1, inten = 0.0035; // Wave intensity factor\n\n    for (int n = 0; n < MAX_ITER; n++) {\n        time -= float(n) * 0.5;\n        i = p + vec2(cos(time - i.x) + sin(time + i.y), sin(time - i.y) + cos(time + i.x));\n        c += 1.0 / length(vec2(p.x / (sin(i.x + time) / inten), p.y / (cos(i.y + time) / inten)));\n    }\n    // Average cumulative length over all iterations\n    c /= float(MAX_ITER);\n    c = 1.17 - pow(c, 2.0);\n\n    float colour = sin(pow(abs(c), 8.0));\n    colour = clamp(colour, 0.0, 1.0);\n\n    return vec4(clamp(vec3(colour), 0.0, 1.0), 1.0);\n}\n#define FLAT_TOP_HEXAGON\n\n// Helper vector. If you're doing anything that involves regular triangles or hexagons, the\n// 30-60-90 triangle will be involved in some way, which has sides of 1, sqrt(3) and 2.\n#ifdef FLAT_TOP_HEXAGON\nconst vec2 s = vec2(1.7320508, 1);\n#else\nconst vec2 s = vec2(1, 1.7320508);\n#endif\n\nfloat hash21(vec2 p)\n{\n    return fract(sin(dot(p, vec2(141.13, 289.97)))*43758.5453);\n}\n\n// The 2D hexagonal isosuface function: If you were to render a horizontal line and one that\n// slopes at 60 degrees, mirror, then combine them, you'd arrive at the following. As an aside,\n// the function is a bound -- as opposed to a Euclidean distance representation, but either\n// way, the result is hexagonal boundary lines.\nfloat hex(in vec2 p)\n{    \n    p = abs(p);\n    \n    #ifdef FLAT_TOP_HEXAGON\n    return max(dot(p, s*.5), p.y); // Hexagon.\n    #else\n    return max(dot(p, s*.5), p.x); // Hexagon.\n    #endif    \n}\n\n// This function returns the hexagonal grid coordinate for the grid cell, and the corresponding \n// hexagon cell ID -- in the form of the central hexagonal point. That's basically all you need to \n// produce a hexagonal grid.\n//\n// When working with 2D, I guess it's not that important to streamline this particular function.\n// However, if you need to raymarch a hexagonal grid, the number of operations tend to matter.\n// This one has minimal setup, one \"floor\" call, a couple of \"dot\" calls, a ternary operator, etc.\n// To use it to raymarch, you'd have to double up on everything -- in order to deal with \n// overlapping fields from neighboring cells, so the fewer operations the better.\nvec4 getHex(vec2 p)\n{    \n    // The hexagon centers: Two sets of repeat hexagons are required to fill in the space, and\n    // the two sets are stored in a \"vec4\" in order to group some calculations together. The hexagon\n    // center we'll eventually use will depend upon which is closest to the current point. Since \n    // the central hexagon point is unique, it doubles as the unique hexagon ID.\n    \n    #ifdef FLAT_TOP_HEXAGON\n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n    #else\n    vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n    #endif\n    \n    // Centering the coordinates with the hexagon centers above.\n    vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    \n    \n    // Nearest hexagon center (with respect to p) to the current point. In other words, when\n    // \"h.xy\" is zero, we're at the center. We're also returning the corresponding hexagon ID -\n    // in the form of the hexagonal central point.\n    //\n    // On a side note, I sometimes compare hex distances, but I noticed that Iomateron compared\n    // the squared Euclidian version, which seems neater, so I've adopted that.\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n        ? vec4(h.xy, hC.xy) \n        : vec4(h.zw, hC.zw + .5);\n}\n\n\nvoid mainImage(out vec4 mainColor, in vec2 uv) {\n    vec4 water = getHex(vec2(5.0 * uv.y, 10.0 * uv.x));\n\n    vec4 eDist = waterwaves(vec2(hex(water.xy)));\n\n    vec3 color = vec3(0.0, 1.0, 1.0);\n    mainColor = vec4(\n        pow(eDist.x, 1.0),\n        pow(eDist.y, 1.0),\n        pow(eDist.z, 1.0), \n        water.a\n    ) * vec4(color, 1.0);\n}"
      },
      "enableFullScreen": true
    }
  ],
  "graph": {
    "nodes": [
      {
        "spaceID": "new-space",
        "_id": "_ne7rk2f_qwuxwti",
        "title": "main",
        "position": [
          -1.207153609979216,
          0,
          -2.402982842475906
        ],
        "inputs": [
          {
            "_id": "_jryjlwi_5v5h9n5",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_6wp8g5z_tyczfim",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_j8k4f1z_8hhfesp",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_0lrrrfm_vtokg3h",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_1wn7q2h_mkv01l9",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_xkvyio0_o2nfl5d",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_gafl8xn_jiqa2bo",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_241hy01_rjtatf9",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_zusb7ux_0tnil7s",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_66fn3o5_364yhdf",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "new-space",
        "_id": "_ck2nyne_fksh47i",
        "title": "light",
        "position": [
          -1.2328102307690842,
          0,
          -1.1017343946058615
        ],
        "inputs": [
          {
            "_id": "_xa0pr15_13dvvis",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_iqg4y2i_td3fnf5",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_igd7w4b_pflm513",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_xfdr6s3_gfedwg5",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_0ecnary_k6sck6v",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_6lpmebm_26fs6wf",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_odf69fi_np77r7a",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_2suc7zt_8bit4cg",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_zvqp56q_3giiktp",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_5vjbyyd_jkiqyp0",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "new-space",
        "_id": "_5zdzfzx_t2sevtt",
        "title": "camera",
        "position": [
          0.9937016881748155,
          0,
          -2.4198045567628736
        ],
        "inputs": [
          {
            "_id": "_afnl8q0_ostxx2k",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_d2j94h1_ho110ik",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_xvolt5l_1sfl324",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_a3orcxk_eyxde2f",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_qkwamx4_zfcduag",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_rgyj3e1_dlzfhqt",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_8btw6u2_ddxj98p",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_hcfmdky_0cflsy7",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_vk9t1hq_4nhbkbe",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_l3am5d2_7lyukhm",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "new-space",
        "_id": "_x801t0d_2qm4x7k",
        "title": "color",
        "position": [
          1.0400047207347014,
          0,
          -1.0550647345987088
        ],
        "inputs": [
          {
            "_id": "_k31qdzs_dvuk8qj",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_h570vzg_pbv4mvj",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_lnwc9np_mxzvoya",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_2afcptv_873yh75",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_txcy7fg_zummklg",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_fd4l9y1_qsmj20x",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_6xqltsq_oow2qq7",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_h0fg6no_uromjkv",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_324kpwm_tdwas79",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_4ozne9k_4vikpzd",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "shader-ai-flow",
        "_id": "_napk8j9_",
        "title": "ai",
        "position": [
          0.9754888394230168,
          0,
          0.5691284690133853
        ],
        "inputs": [
          {
            "_id": "_rvgi4hh_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_0tofnu5_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_ghdaaca_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_qhv51uj_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_yiwek91_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_7lmfrvm_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_c1cncxk_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_nfrkido_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_zixr2ko_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_tjzvdop_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "shader-ai-flow",
        "_id": "_bzyp0zk_",
        "title": "mesh",
        "position": [
          -1.3775545105055005,
          0,
          0.5739954692657292
        ],
        "inputs": [
          {
            "_id": "_ayorfl4_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_ib6lo1i_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_5oec5ls_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_06rstzi_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_l0z98u7_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_ni1fx5y_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_crxarlt_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_rmw4i99_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_9nv6uuy_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_hv1nyi1_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          }
        ]
      }
    ],
    "edges": []
  },
  "title": "ai-assisted-shader-development"
}