{
  "settings": [
    {
      "codeID": "_kit5h2c_xgm7ojm",
      "nodeID": "_ne7rk2f_qwuxwti",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_hc1bmqv_gfx2nsl",
          "label": "name",
          "type": "text",
          "value": "my webgl canvas"
        }
      ],
      "title": "main"
    },
    {
      "codeID": "_6wwhxoe_fp2fg97",
      "nodeID": "_quzfyzi_iybz833",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_340ozy1_bvl61x2",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0.48000000000000004
        },
        {
          "_id": "_wqx0zng_5cvbuet",
          "label": "baseColor",
          "type": "color",
          "value": "#003eff"
        },
        {
          "_id": "_v22exa7_h0arilg",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        },
        {
          "_id": "_uxvekoz_vlcqhii",
          "label": "happyColor",
          "type": "color",
          "value": "#c10e0e"
        }
      ],
      "title": "happy"
    },
    {
      "codeID": "_x027a1w_24c0grb",
      "nodeID": "_ck2nyne_fksh47i",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_qyubhzw_05aof46",
          "label": "pointLightColor",
          "type": "color",
          "value": "#ffffff"
        },
        {
          "_id": "_3cr50ux_ktd5kuq",
          "label": "intensity",
          "type": "range",
          "min": 0,
          "max": 100.00000000000001,
          "step": 0.09999999999999998,
          "value": 2.999999999999999
        }
      ],
      "title": "light"
    },
    {
      "codeID": "_hbuh2ad_05kot3i",
      "nodeID": "_5zdzfzx_t2sevtt",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_swgs8mf_xsr52yi",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_ak23u2c_yrx8fim",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        },
        {
          "_id": "_1e6obts_a5r83xl",
          "label": "positionZ",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 5
        },
        {
          "_id": "_e1h29nd_2x7vny0",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        }
      ],
      "title": "camera"
    },
    {
      "codeID": "_e7jaen2_0bdd9xz",
      "nodeID": "_x801t0d_2qm4x7k",
      "nodeTitle": "node",
      "spaceID": "new-space",
      "code": "",
      "data": [
        {
          "_id": "_trk3v9r_x6fakj6",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        },
        {
          "_id": "_1ko0o77_i9qjb4e",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_yykfz1w_owrte7e",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        }
      ],
      "title": "color",
      "metaData": {}
    },
    {
      "codeID": "_ygjgayq_",
      "nodeID": "_napk8j9_",
      "nodeTitle": "node",
      "spaceID": "shader-ai-flow",
      "code": "",
      "data": [
        {
          "_id": "_z63kv6p_",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        },
        {
          "_id": "_1q9kf20_",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_2pga102_",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        }
      ],
      "title": "ai",
      "metaData": {
        "aiOutput": "Here is the refined code with minimal explanation and same input/output:\n\n```glsl\n#define TAU 6.28318530718\n#define MAX_ITER 15\n#define TILING 1.0\n\nvec4 waterwaves(in vec2 uv) {\n  // time-based displacement for waves\n  float time = iTime * .5 + 23.0;\n\n  vec2 p = mod(uv * TAU, TAU); // normalized position on canvas\n\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .005;\n\n  for (int n = 0; n < MAX_ITER; n++) {\n    float t = time * (1.0 - (3.5 / float(n + 1)));\n    // iterate through waves and compute curvature\n    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n    c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  // normalize and map to color value\n  c /= float(MAX_ITER);\n  c = 1.17 - pow(c, 1.4);\n\n  vec3 colour = vec3(pow(abs(c), 8.0)); // map curvature to color\n\n  if (SHOW_TILING) {\n    // Flash tile borders...\n    vec2 pixel = 2.0 / iResolution.xy; // calculate pixel size\n    uv *= 2.0;\n    \n    float f = floor(mod(iTime * .5, 2.0)); // Flash value.\n    vec2 first = step(pixel, uv) * f; // Rule out first screen pixels and flash.\n    uv = step(fract(uv), pixel); // Add one line of pixels per tile.\n\n    colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y);\n  }\n\n  return vec4(clamp(colour.rgb, 0.0, 1.0), 1.0);\n}\n\nvoid mainImage(out vec4 mainColor, in vec2 uv) {\n  vec4 water = waterwaves(uv); // compute and texture water\n\n  // gamma correction for brightness\n  mainColor = vec4(pow(water.rgb * .85 + 0.15, 1.4), 1.0);\n}\n```\nPlease let me know if you would like any further explanations.",
        "instructionText": "improve and refine the following glsl code and make sure it has same input and output. minimum explanation in text. only show code. add explanation in code comments.  ",
        "codeText": "#define TAU 6.28318530718\n#define MAX_ITER 15\n\nvec4 waterwaves(in vec2 uv) {\n  float time = iTime * .5 + 23.0;\n\n  #ifdef SHOW_TILING\n  vec2 p = mod(uv * TAU * 2.0, TAU) - 250.0;\n  #else\n  vec2 p = mod(uv * TAU, TAU) - 250.0;\n  #endif\n\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .005;\n\n  for (int n = 0; n < MAX_ITER; n++) {\n    float t = time * (1.0 - (3.5 / float(n + 1)));\n    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n    c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(MAX_ITER);\n  c = 1.17 - pow(c, 1.4);\n\n  vec3 colour = vec3(pow(abs(c), 8.0));\n  colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n\n  #ifdef SHOW_TILING\n  // Flash tile borders...\n  vec2 pixel = 2.0 / iResolution.xy;\n  uv *= 2.0;\n\n  float f = floor(mod(iTime * .5, 2.0)); // Flash value.\n  vec2 first = step(pixel, uv) * f; // Rule out first screen pixels and flash.\n  uv = step(fract(uv), pixel); // Add one line of pixels per tile.\n\n  colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y);\n  #endif\n\n  return vec4(colour, 1.0);\n}\n\nvoid mainImage(out vec4 mainColor, in vec2 uv) {\n  vec4 water = waterwaves(uv);\n\n  mainColor = vec4(\n    vec3(pow(water.r, 4.0), pow(water.g, 4.0), pow(water.b, 4.0)) * 1.1,\n    1.0\n  );\n}"
      },
      "enableFullScreen": true
    },
    {
      "codeID": "_o1atqxp_",
      "nodeID": "_bzyp0zk_",
      "nodeTitle": "node",
      "spaceID": "shader-ai-flow",
      "code": "",
      "data": [
        {
          "_id": "_tmdurqv_",
          "label": "speed",
          "type": "range",
          "min": 0,
          "max": 1,
          "step": 0.01,
          "value": 0
        },
        {
          "_id": "_oolzvk0_",
          "label": "baseColor",
          "type": "color",
          "value": "#ff0000"
        },
        {
          "_id": "_rkvk26k_",
          "label": "name",
          "type": "text",
          "value": "hi dear"
        }
      ],
      "title": "mesh",
      "metaData": {
        "shaderBox": "\n#define TAU 6.28318530718\n#define MAX_ITER 15\n\nvec4 waterwaves(in vec2 uv) {\n  // Set a fixed time value, this value can be updated for animations or transitions\n  float time = iTime * .5 + 23.0;\n\n  #ifdef SHOW_TILING\n  // Tiling function to make the waves appear tiled\n  vec2 p = mod(uv * TAU * 2.0, TAU) - 250.0;\n  #else\n  vec2 p = mod(uv * TAU, TAU) - 250.0;\n  #endif\n\n  vec2 i = vec2(p); // Initialize the vector with the tile position\n  float c = 1.0; // Initial intensity of the wave\n  float inten = .005; // Amplitude of the wave's texture influence\n\n  for (int n = 0; n < MAX_ITER; n++) {\n    // Time dependent wavy displacement based on time and position\n    float t = time * (1.0 - (3.5 / float(n + 1)));\n    i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n    // Calculate the new texture coordinates based on the wave function\n    c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  // Normalize the intensity values by the total iterations performed\n  c /= float(MAX_ITER);\n  c = 1.17 - pow(c, 1.4);\n\n  vec3 colour = vec3(pow(abs(c), 3.5));\n  colour = clamp(colour + vec3(0.0, 0.0, 0.0), 0.0, 1.0);\n  \n  // Tiling and border flashing (only shown when SHOW_TILING is defined)\n  #ifdef SHOW_TILING\n  // Convert the pixel coordinates to UV coordinates based on resolution.\n  vec2 pixel = 2.0 / iResolution.xy;\n  uv *= 2.0;\n\n  float f = floor(mod(iTime * .5, 2.0)); \n  vec2 first = step(pixel, uv) * f; \n  // Create the border effect by adding pixels for every tile and flashing every other frame\n  uv = step(fract(uv), pixel); \n  colour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y);\n  \n  #endif\n\n  return vec4(colour, 1.0);\n}\n\nvoid mainImage(out vec4 mainColor, in vec2 uv) {\n  vec4 water = waterwaves(uv);\n\n  mainColor = vec4(\n    // Calculate the color by exponentiating the RGB intensity\n    vec3(pow(water.r, 4.0), pow(water.g, 4.0), pow(water.b, 4.0)) * 1.1,\n    1.0\n  );\n}"
      },
      "enableFullScreen": true
    }
  ],
  "graph": {
    "nodes": [
      {
        "spaceID": "new-space",
        "_id": "_ne7rk2f_qwuxwti",
        "title": "main",
        "position": [
          -1.207153609979216,
          0,
          -2.402982842475906
        ],
        "inputs": [
          {
            "_id": "_jryjlwi_5v5h9n5",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_6wp8g5z_tyczfim",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_j8k4f1z_8hhfesp",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_0lrrrfm_vtokg3h",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_1wn7q2h_mkv01l9",
            "type": "input",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_xkvyio0_o2nfl5d",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_gafl8xn_jiqa2bo",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_241hy01_rjtatf9",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_zusb7ux_0tnil7s",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          },
          {
            "_id": "_66fn3o5_364yhdf",
            "type": "output",
            "nodeID": "_ne7rk2f_qwuxwti",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "new-space",
        "_id": "_ck2nyne_fksh47i",
        "title": "light",
        "position": [
          -1.2328102307690842,
          0,
          -1.1017343946058615
        ],
        "inputs": [
          {
            "_id": "_xa0pr15_13dvvis",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_iqg4y2i_td3fnf5",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_igd7w4b_pflm513",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_xfdr6s3_gfedwg5",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_0ecnary_k6sck6v",
            "type": "input",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_6lpmebm_26fs6wf",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_odf69fi_np77r7a",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_2suc7zt_8bit4cg",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_zvqp56q_3giiktp",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          },
          {
            "_id": "_5vjbyyd_jkiqyp0",
            "type": "output",
            "nodeID": "_ck2nyne_fksh47i",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "new-space",
        "_id": "_5zdzfzx_t2sevtt",
        "title": "camera",
        "position": [
          0.9937016881748155,
          0,
          -2.4198045567628736
        ],
        "inputs": [
          {
            "_id": "_afnl8q0_ostxx2k",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_d2j94h1_ho110ik",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_xvolt5l_1sfl324",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_a3orcxk_eyxde2f",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_qkwamx4_zfcduag",
            "type": "input",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_rgyj3e1_dlzfhqt",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_8btw6u2_ddxj98p",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_hcfmdky_0cflsy7",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_vk9t1hq_4nhbkbe",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          },
          {
            "_id": "_l3am5d2_7lyukhm",
            "type": "output",
            "nodeID": "_5zdzfzx_t2sevtt",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "new-space",
        "_id": "_x801t0d_2qm4x7k",
        "title": "color",
        "position": [
          1.0400047207347014,
          0,
          -1.0550647345987088
        ],
        "inputs": [
          {
            "_id": "_k31qdzs_dvuk8qj",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_h570vzg_pbv4mvj",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_lnwc9np_mxzvoya",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_2afcptv_873yh75",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_txcy7fg_zummklg",
            "type": "input",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_fd4l9y1_qsmj20x",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_6xqltsq_oow2qq7",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_h0fg6no_uromjkv",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_324kpwm_tdwas79",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          },
          {
            "_id": "_4ozne9k_4vikpzd",
            "type": "output",
            "nodeID": "_x801t0d_2qm4x7k",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "shader-ai-flow",
        "_id": "_napk8j9_",
        "title": "ai",
        "position": [
          1.2081445651644531,
          0,
          0.6000950077657684
        ],
        "inputs": [
          {
            "_id": "_rvgi4hh_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_0tofnu5_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_ghdaaca_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_qhv51uj_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_yiwek91_",
            "type": "input",
            "nodeID": "_napk8j9_",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_7lmfrvm_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_c1cncxk_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_nfrkido_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_zixr2ko_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          },
          {
            "_id": "_tjzvdop_",
            "type": "output",
            "nodeID": "_napk8j9_",
            "label": ""
          }
        ]
      },
      {
        "spaceID": "shader-ai-flow",
        "_id": "_bzyp0zk_",
        "title": "mesh",
        "position": [
          -1.6937209326595901,
          0,
          0.7432995574974994
        ],
        "inputs": [
          {
            "_id": "_ayorfl4_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_ib6lo1i_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_5oec5ls_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_06rstzi_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_l0z98u7_",
            "type": "input",
            "nodeID": "_bzyp0zk_",
            "label": ""
          }
        ],
        "outputs": [
          {
            "_id": "_ni1fx5y_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_crxarlt_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_rmw4i99_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_9nv6uuy_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          },
          {
            "_id": "_hv1nyi1_",
            "type": "output",
            "nodeID": "_bzyp0zk_",
            "label": ""
          }
        ]
      }
    ],
    "edges": []
  },
  "title": "shader-ai-flow"
}